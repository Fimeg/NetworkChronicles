#!/bin/bash

# Network Chronicles - Linux Learning Game
# Single-player terminal-based learning experience

# Game directories
GAME_DIR="$HOME/.network-chronicles"
SAVE_FILE="$GAME_DIR/player.save"
QUEST_DIR="$GAME_DIR/quests"
LOG_FILE="$GAME_DIR/game.log"

# Colors for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Initialize game
init_game() {
    echo -e "${CYAN}╔══════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║        NETWORK CHRONICLES            ║${NC}"
    echo -e "${CYAN}║    Linux Learning Adventure         ║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════╝${NC}"
    echo
    
    # Create game directory if it doesn't exist
    mkdir -p "$GAME_DIR" "$QUEST_DIR"
    
    # Initialize player if new
    if [[ ! -f "$SAVE_FILE" ]]; then
        echo "PLAYER_NAME=Newcomer" > "$SAVE_FILE"
        echo "LEVEL=1" >> "$SAVE_FILE"
        echo "XP=0" >> "$SAVE_FILE"
        echo "CURRENT_QUEST=intro" >> "$SAVE_FILE"
        echo "COMPLETED_QUESTS=" >> "$SAVE_FILE"
        echo "DISCOVERIES=" >> "$SAVE_FILE"
        echo
        echo -e "${GREEN}Welcome to Network Chronicles!${NC}"
        echo -e "${YELLOW}You are a new systems administrator who must learn Linux skills${NC}"
        echo -e "${YELLOW}to uncover the mystery of the vanishing admin...${NC}"
        echo
    fi
    
    # Load player data
    source "$SAVE_FILE"
    
    echo -e "${WHITE}Player: ${GREEN}$PLAYER_NAME${NC} | ${WHITE}Level: ${GREEN}$LEVEL${NC} | ${WHITE}XP: ${GREEN}$XP${NC}"
    echo
}

# Show available commands
show_help() {
    echo -e "${CYAN}Available Commands:${NC}"
    echo -e "  ${GREEN}start${NC}     - Start or continue your current quest"
    echo -e "  ${GREEN}status${NC}    - Show your character status"
    echo -e "  ${GREEN}quests${NC}    - List available quests"
    echo -e "  ${GREEN}discover${NC}  - Scan your system for learning opportunities"
    echo -e "  ${GREEN}skills${NC}    - Show your Linux skills progress"
    echo -e "  ${GREEN}help${NC}      - Show this help"
    echo -e "  ${GREEN}exit${NC}      - Save and exit game"
    echo
}

# Show player status
show_status() {
    source "$SAVE_FILE"
    echo -e "${CYAN}═══ PLAYER STATUS ═══${NC}"
    echo -e "${WHITE}Name:${NC} $PLAYER_NAME"
    echo -e "${WHITE}Level:${NC} $LEVEL"
    echo -e "${WHITE}Experience:${NC} $XP XP"
    echo -e "${WHITE}Current Quest:${NC} $CURRENT_QUEST"
    
    if [[ -n "$COMPLETED_QUESTS" ]]; then
        echo -e "${WHITE}Completed Quests:${NC} $(echo $COMPLETED_QUESTS | tr ',' ' ')"
    fi
    
    if [[ -n "$DISCOVERIES" ]]; then
        echo -e "${WHITE}Discoveries:${NC} $(echo $DISCOVERIES | wc -w)"
    fi
    echo
}

# Award XP and handle level ups
award_xp() {
    local xp_gain=$1
    local reason=$2
    
    source "$SAVE_FILE"
    
    XP=$((XP + xp_gain))
    
    # Level up calculation (every 100 XP)
    local new_level=$(((XP / 100) + 1))
    if [[ $new_level -gt $LEVEL ]]; then
        LEVEL=$new_level
        echo -e "${YELLOW}🎉 LEVEL UP! You are now level $LEVEL!${NC}"
    fi
    
    echo -e "${GREEN}+$xp_gain XP${NC} - $reason"
    
    # Save progress
    sed -i "s/XP=.*/XP=$XP/" "$SAVE_FILE"
    sed -i "s/LEVEL=.*/LEVEL=$LEVEL/" "$SAVE_FILE"
    
    echo "$(date): Gained $xp_gain XP for: $reason" >> "$LOG_FILE"
}

# Quest: Introduction to Linux
quest_intro() {
    echo -e "${PURPLE}═══ QUEST: Welcome to the Terminal ═══${NC}"
    echo -e "${YELLOW}The system administrator has vanished, leaving only cryptic notes.${NC}"
    echo -e "${YELLOW}You must learn basic Linux commands to investigate...${NC}"
    echo
    
    echo -e "${CYAN}TASK 1: Check where you are${NC}"
    echo -e "Use the ${GREEN}pwd${NC} command to print your current directory:"
    read -p "$(echo -e ${WHITE}Enter command:${NC} )" cmd
    
    if [[ "$cmd" == "pwd" ]]; then
        pwd
        award_xp 25 "Used pwd command correctly"
        echo -e "${GREEN}✓ Perfect! You found your location.${NC}"
        echo
        
        echo -e "${CYAN}TASK 2: List the files around you${NC}"
        echo -e "Use ${GREEN}ls${NC} to see what files are here:"
        read -p "$(echo -e ${WHITE}Enter command:${NC} )" cmd
        
        if [[ "$cmd" == "ls" || "$cmd" == "ls -l" || "$cmd" == "ls -la" ]]; then
            $cmd
            award_xp 25 "Listed directory contents"
            echo -e "${GREEN}✓ Excellent! You can see your surroundings.${NC}"
            echo
            
            echo -e "${CYAN}TASK 3: Create your first clue file${NC}"
            echo -e "Use ${GREEN}touch clue1.txt${NC} to create a file:"
            read -p "$(echo -e ${WHITE}Enter command:${NC} )" cmd
            
            if [[ "$cmd" == "touch clue1.txt" ]]; then
                touch clue1.txt
                award_xp 50 "Created your first file"
                echo -e "${GREEN}✓ Well done! You've created a clue file.${NC}"
                echo
                
                # Complete quest
                source "$SAVE_FILE"
                if [[ "$COMPLETED_QUESTS" == "" ]]; then
                    COMPLETED_QUESTS="intro"
                else
                    COMPLETED_QUESTS="$COMPLETED_QUESTS,intro"
                fi
                sed -i "s/COMPLETED_QUESTS=.*/COMPLETED_QUESTS=\"$COMPLETED_QUESTS\"/" "$SAVE_FILE"
                sed -i "s/CURRENT_QUEST=.*/CURRENT_QUEST=basics/" "$SAVE_FILE"
                
                echo -e "${YELLOW}Quest Complete! You've learned the basics of navigation.${NC}"
                echo -e "${CYAN}New quest available: 'Linux File Basics'${NC}"
                award_xp 100 "Completed intro quest"
                
            else
                echo -e "${RED}Try again. Use: touch clue1.txt${NC}"
            fi
        else
            echo -e "${RED}Try again. Use: ls${NC}"
        fi
    else
        echo -e "${RED}Try again. Use: pwd${NC}"
    fi
}

# Quest: Linux Basics
quest_basics() {
    echo -e "${PURPLE}═══ QUEST: Linux File Basics ═══${NC}"
    echo -e "${YELLOW}You found a note: 'The admin's files are hidden everywhere.'${NC}"
    echo -e "${YELLOW}Learn to manipulate files to uncover more clues...${NC}"
    echo
    
    echo -e "${CYAN}TASK 1: View hidden files${NC}"
    echo -e "Use ${GREEN}ls -la${NC} to see all files including hidden ones:"
    read -p "$(echo -e ${WHITE}Enter command:${NC} )" cmd
    
    if [[ "$cmd" == "ls -la" || "$cmd" == "ls -a" ]]; then
        $cmd
        award_xp 30 "Discovered hidden files"
        echo -e "${GREEN}✓ Great! You can now see hidden files (starting with .)${NC}"
        echo
        
        echo -e "${CYAN}TASK 2: Create a directory for evidence${NC}"
        echo -e "Use ${GREEN}mkdir evidence${NC} to create a directory:"
        read -p "$(echo -e ${WHITE}Enter command:${NC} )" cmd
        
        if [[ "$cmd" == "mkdir evidence" ]]; then
            mkdir -p evidence
            award_xp 30 "Created evidence directory"
            echo -e "${GREEN}✓ Perfect! Organization is key for investigations.${NC}"
            echo
            
            echo -e "${CYAN}TASK 3: Copy your clue file${NC}"
            echo -e "Use ${GREEN}cp clue1.txt evidence/${NC} to copy the file:"
            read -p "$(echo -e ${WHITE}Enter command:${NC} )" cmd
            
            if [[ "$cmd" == "cp clue1.txt evidence/" ]]; then
                cp clue1.txt evidence/ 2>/dev/null || touch evidence/clue1.txt
                award_xp 40 "Copied evidence file"
                echo -e "${GREEN}✓ Excellent! File copied successfully.${NC}"
                
                # Complete quest
                source "$SAVE_FILE"
                COMPLETED_QUESTS="$COMPLETED_QUESTS,basics"
                sed -i "s/COMPLETED_QUESTS=.*/COMPLETED_QUESTS=\"$COMPLETED_QUESTS\"/" "$SAVE_FILE"
                sed -i "s/CURRENT_QUEST=.*/CURRENT_QUEST=network/" "$SAVE_FILE"
                
                echo -e "${YELLOW}Quest Complete! You've mastered basic file operations.${NC}"
                echo -e "${CYAN}New quest available: 'Network Discovery'${NC}"
                award_xp 100 "Completed basics quest"
                
            else
                echo -e "${RED}Try again. Use: cp clue1.txt evidence/${NC}"
            fi
        else
            echo -e "${RED}Try again. Use: mkdir evidence${NC}"
        fi
    else
        echo -e "${RED}Try again. Use: ls -la${NC}"
    fi
}

# Quest: Network Discovery
quest_network() {
    echo -e "${PURPLE}═══ QUEST: Network Discovery ═══${NC}"
    echo -e "${YELLOW}The admin's last note mentions network anomalies.${NC}"
    echo -e "${YELLOW}Learn network commands to investigate...${NC}"
    echo
    
    echo -e "${CYAN}TASK 1: Check your network interface${NC}"
    echo -e "Use ${GREEN}ip addr${NC} or ${GREEN}ifconfig${NC} to see network interfaces:"
    read -p "$(echo -e ${WHITE}Enter command:${NC} )" cmd
    
    if [[ "$cmd" == "ip addr" || "$cmd" == "ifconfig" || "$cmd" == "ip a" ]]; then
        $cmd 2>/dev/null || echo "Network interface information would appear here"
        award_xp 50 "Checked network interfaces"
        echo -e "${GREEN}✓ Good! You can see your network configuration.${NC}"
        echo
        
        echo -e "${CYAN}TASK 2: Test network connectivity${NC}"
        echo -e "Use ${GREEN}ping -c 3 8.8.8.8${NC} to test internet connectivity:"
        read -p "$(echo -e ${WHITE}Enter command:${NC} )" cmd
        
        if [[ "$cmd" =~ ^ping.*8\.8\.8\.8 ]]; then
            ping -c 3 8.8.8.8 2>/dev/null || echo "PING 8.8.8.8: 3 packets transmitted, 3 received"
            award_xp 50 "Tested network connectivity"
            echo -e "${GREEN}✓ Excellent! Network is responsive.${NC}"
            echo
            
            echo -e "${CYAN}TASK 3: Scan for local services${NC}"
            echo -e "Use ${GREEN}netstat -tlnp${NC} to see listening services:"
            read -p "$(echo -e ${WHITE}Enter command:${NC} )" cmd
            
            if [[ "$cmd" == "netstat -tlnp" || "$cmd" =~ netstat.*-.*l ]]; then
                netstat -tlnp 2>/dev/null || ss -tlnp 2>/dev/null || echo "Local services scanning..."
                award_xp 75 "Scanned local services"
                echo -e "${GREEN}✓ Outstanding! You've discovered local network services.${NC}"
                
                # Complete quest
                source "$SAVE_FILE"
                COMPLETED_QUESTS="$COMPLETED_QUESTS,network"
                sed -i "s/COMPLETED_QUESTS=.*/COMPLETED_QUESTS=\"$COMPLETED_QUESTS\"/" "$SAVE_FILE"
                sed -i "s/CURRENT_QUEST=.*/CURRENT_QUEST=security/" "$SAVE_FILE"
                
                echo -e "${YELLOW}Quest Complete! You've learned network investigation.${NC}"
                echo -e "${CYAN}New quest available: 'Security Analysis'${NC}"
                award_xp 150 "Completed network quest"
                
            else
                echo -e "${RED}Try again. Use: netstat -tlnp${NC}"
            fi
        else
            echo -e "${RED}Try again. Use: ping -c 3 8.8.8.8${NC}"
        fi
    else
        echo -e "${RED}Try again. Use: ip addr or ifconfig${NC}"
    fi
}

# Start quest system
start_quest() {
    source "$SAVE_FILE"
    
    case "$CURRENT_QUEST" in
        "intro")
            quest_intro
            ;;
        "basics")
            quest_basics
            ;;
        "network")
            quest_network
            ;;
        "security")
            echo -e "${PURPLE}Security quest coming soon!${NC}"
            echo -e "${YELLOW}More quests will be added as you progress.${NC}"
            ;;
        *)
            echo -e "${RED}No active quest. Something went wrong!${NC}"
            ;;
    esac
}

# Discovery system
discovery_scan() {
    echo -e "${CYAN}═══ SCANNING SYSTEM ═══${NC}"
    echo -e "${YELLOW}Looking for learning opportunities...${NC}"
    echo
    
    local discoveries=0
    
    # Check for interesting directories
    if [[ -d "/var/log" ]]; then
        echo -e "${GREEN}🔍 Found: System logs in /var/log${NC}"
        echo -e "   Learn: Use 'tail -f /var/log/syslog' to monitor system activity"
        ((discoveries++))
    fi
    
    # Check for package manager
    if command -v apt >/dev/null 2>&1; then
        echo -e "${GREEN}🔍 Found: APT package manager${NC}"
        echo -e "   Learn: Use 'apt list --installed' to see installed packages"
        ((discoveries++))
    elif command -v yum >/dev/null 2>&1; then
        echo -e "${GREEN}🔍 Found: YUM package manager${NC}"
        echo -e "   Learn: Use 'yum list installed' to see installed packages"
        ((discoveries++))
    fi
    
    # Check for running services
    if command -v systemctl >/dev/null 2>&1; then
        echo -e "${GREEN}🔍 Found: SystemD service manager${NC}"
        echo -e "   Learn: Use 'systemctl status' to check service status"
        ((discoveries++))
    fi
    
    # Check for SSH
    if [[ -f "/etc/ssh/sshd_config" ]]; then
        echo -e "${GREEN}🔍 Found: SSH configuration${NC}"
        echo -e "   Learn: SSH is used for secure remote connections"
        ((discoveries++))
    fi
    
    # Award XP for discoveries
    if [[ $discoveries -gt 0 ]]; then
        award_xp $((discoveries * 25)) "System discovery scan"
        echo
        echo -e "${CYAN}Total discoveries: $discoveries${NC}"
    else
        echo -e "${YELLOW}No new discoveries this time. Try again later!${NC}"
    fi
}

# Show skills progress
show_skills() {
    source "$SAVE_FILE"
    
    echo -e "${CYAN}═══ LINUX SKILLS PROGRESS ═══${NC}"
    
    # Calculate skill levels based on completed quests
    local file_ops=0
    local network=0
    local security=0
    
    if [[ "$COMPLETED_QUESTS" =~ intro ]]; then
        file_ops=$((file_ops + 1))
    fi
    if [[ "$COMPLETED_QUESTS" =~ basics ]]; then
        file_ops=$((file_ops + 2))
    fi
    if [[ "$COMPLETED_QUESTS" =~ network ]]; then
        network=$((network + 3))
    fi
    
    echo -e "${WHITE}File Operations:${NC} Level $file_ops"
    echo -e "${WHITE}Network Skills:${NC} Level $network"
    echo -e "${WHITE}Security Knowledge:${NC} Level $security"
    echo
    echo -e "${YELLOW}Keep completing quests to improve your skills!${NC}"
}

# Main game loop
main() {
    init_game
    
    if [[ $# -gt 0 ]]; then
        case "$1" in
            "start") start_quest ;;
            "status") show_status ;;
            "discover") discovery_scan ;;
            "skills") show_skills ;;
            "help") show_help ;;
            *) echo -e "${RED}Unknown command. Use 'help' for available commands.${NC}" ;;
        esac
        exit 0
    fi
    
    show_help
    
    while true; do
        echo -e "${WHITE}> ${NC}\c"
        read command
        
        case "$command" in
            "start") start_quest ;;
            "status") show_status ;;
            "quests") echo -e "${CYAN}Available quests: intro → basics → network → security${NC}" ;;
            "discover") discovery_scan ;;
            "skills") show_skills ;;
            "help") show_help ;;
            "exit"|"quit") 
                echo -e "${GREEN}Game saved. See you next time!${NC}"
                exit 0
                ;;
            "") continue ;;
            *) echo -e "${RED}Unknown command '$command'. Use 'help' for available commands.${NC}" ;;
        esac
        echo
    done
}

# Run the game
main "$@"